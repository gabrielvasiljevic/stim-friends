/**
 * SessionController
 *
 * @module		:: Controller
 * @description	:: Contains logic for handling requests.
 */

var bcrypt = require('bcrypt');

var request = require('request');

module.exports = {

	'new': function(req, res){
		res.view('session/new');		
	},

	create: function(req, res, next){
	    if(!req.param('email') || !req.param('password')){
		     var userORpasswordRequired = [{name: 'userORpasswordRequired', message: 'Enter e-mail and password!'}]
		
		    req.session.flash = {
			    err: userORpasswordRequired 
		    }
		    res.redirect('/session/new');
		    return;
	    }
	},
		
	getUserList: function(req, res){
	    request('http://istim-user.nodejitsu.com/user', function(error, response, body){
	        if(!error && response.statusCode == 200){
	            console.log(JSON.parse(body));
	            return res.send(200, JSON.parse(body));
	        }
	        else{
	            return res.send(404, 'Page not found!');
	        }
        });
	},
        
        
		User.findOneByEmail(req.param('email')).done(function(err, user){
			if(err) return next(err);
			
			if(!user){
				var noAccount = [{name: 'noAccount', message: 'E-mail ' +req.param('email') + 'not found.'}]
				req.session.flash = {
					err: noAccount
				}
				res.redirect('/session/new');
				return;
			}
			
			bcrypt.compare(req.param('password'), user.encryptedPassword, function(err, valid){
				if(err) return next(err);
				
				if(!valid){
					var usernamePasswordMismatchError = [{name: 'usernamePasswordMismatch', message: 'Invalid username or password combination.'}];
					
					req.session.flash = {
						err: usernamePasswordMismatchError
					}
					res.redirect('/session/new');
					return;
				}
				req.session.authenticated = true;
				req.session.User = user;
				user.online = true;
				user.save(function(err, user){
					if(err) return next(err);
					User.publishUpdate(user.id, {
						LoggedIn: true,
						id: user.id
					});
					if(req.session.User.admin){
						res.redirect('/user');
						return;
					}
					res.redirect('/user/show/' + user.id);
				});
				
			});
		
		}); 

	},
	
	destroy: function(req, res, next){
		User.findOne(req.session.User.id, function foundUser (err, user) {
		
			var userId = req.session.User.id;
			
			User.update(userId, {
				online: false
				}, function(err) {
					if(err) return next(err);
					User.publishUpdate(user.id, {
						LoggedIn: false,
						id: user.id
					});
					req.session.destroy();
					res.redirect("/");
			});
		});
	}

};
